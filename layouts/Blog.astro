---
import type { CollectionEntry } from 'astro:content'

import BlogAvailableLocales from '~/components/Blog/BlogAvailableLocales.astro'
import BlogAdditionalPosts from '~/components/Blog/BlogAdditionalPosts.astro'
import BlogWidgetWrapper from '~/components/Blog/BlogWidgetWrapper.astro'
import BlogEditPageLink from '~/components/Blog/BlogEditPageLink.astro'
import BlogTranslation from '~/components/Blog/BlogTranslation.svelte'
import BlogReadingTime from '~/components/Blog/BlogReadingTime.astro'
import { getLocaleFromUrl } from '~/utils/get-locale-from-url'
import BlogShare from '~/components/Blog/BlogShare.svelte'
import BlogHero from '~/components/Blog/BlogHero.astro'
import BlogInfo from '~/components/Blog/BlogInfo.astro'
import BlogDate from '~/components/Blog/BlogDate.astro'
import Container from '~/components/Container.astro'
import Header from '~/components/Header.astro'
import Footer from '~/components/Footer.astro'
import Title from '~/components/Title.astro'
import { getPosts } from '~/utils/get-posts'
import Head from '~/components/Head.astro'
import Html from '~/components/Html.astro'
import '~/styles/headings.css'
import '~/styles/code.css'

type Props = CollectionEntry<'blog'>['data'] & {
  body: string
  slug: string
}

let { description, keywords, title, date, slug, body } = Astro.props

let { url } = Astro
let locale = getLocaleFromUrl(url)
let realLocale = getLocaleFromUrl(url, true)

let parseUrl = (currentUrl: string) => {
  let [slugValue, localeValue] = currentUrl.replace(/\.mdx?$/, '').split('/')
  return { locale: localeValue!, slug: slugValue! }
}

let id = parseUrl(slug).slug

let posts = await getPosts()

let translations = posts
  .filter(
    post =>
      parseUrl(slug).slug === parseUrl(post.slug!).slug &&
      realLocale !== parseUrl(post.id).locale,
  )
  .map(({ slug: slugValue, ...post }) => {
    let localeValue = post.id.replace(/\.mdx?$/, '').split('/')[1]!
    return {
      ...post,
      locale: localeValue,
      slug: slugValue!,
    }
  })
---

<Html>
  <Head
    image={`/${realLocale}/blog/${id}/open-graph.png`}
    description={description}
    keywords={keywords}
    type="article"
    title={title}
    date={date}
  />
  <body>
    <Header />
    <main itemtype="http://schema.org/BlogPosting" itemscope>
      <BlogHero itemprop="thumbnail" name={title} id={id} />
      <Container class="content" tag="article">
        <Title itemprop="headline" align="start" mbe="xs">
          {title}
        </Title>
        <BlogInfo>
          <BlogDate itemprop="datePublished" date={date} />
          <BlogReadingTime itemprop="timeRequired" body={body} />
        </BlogInfo>
        <BlogAvailableLocales translations={translations} />
        <slot />
      </Container>
      <Container class="info" tag="aside">
        <BlogTranslation
          translations={translations.map(({ locale: localeValue }) => ({
            locale: localeValue,
          }))}
          client:load
        />
        <BlogWidgetWrapper class="info-box">
          <BlogEditPageLink slug={slug} />
          <BlogShare
            description={description}
            className="blog-share"
            locale={locale}
            title={title}
            client:only
            url={url}
          />
          <div id="share-fallback"></div>
          <BlogAdditionalPosts slug={slug} />
        </BlogWidgetWrapper>
      </Container>
    </main>
    <Footer />
  </body>
</Html>

<style>
  body {
    display: grid;
    grid-template-rows: min-content 1fr min-content;
    min-block-size: 100dvb;
  }

  .content {
    padding-block-end: 0;
  }

  .info {
    padding-block-start: 0;
  }

  .info-box {
    @container (inline-size >= 560px) {
      :global(.blog-share) {
        place-content: end;

        :global(.share) {
          flex-direction: row-reverse;
        }
      }
    }
  }
</style>
