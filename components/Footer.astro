---
import { getLocaleFromUrl } from '~/utils/get-locale-from-url'
import { useTranslations } from '~/utils/use-translations'
import Typography from '~/components/Typography.astro'
import Hidden from '~/components/Hidden.astro'
import IconGithub from '~/icons/github.svg'
import IconX from '~/icons/x.svg'

let locale = getLocaleFromUrl(Astro.url)
let t = useTranslations(locale, 'footer')

let xUsername = locale === 'ru' ? 'azat_io' : 'azat_io_en'

let icons = [
  {
    link: `https://x.com/${xUsername}`,
    name: t('x'),
    icon: IconX,
    id: 'X',
  },
  {
    link: 'https://github.com/azat-io',
    name: t('github'),
    icon: IconGithub,
    id: 'GitHub',
  },
]
---

<script is:inline>
  let initCopyCodePlugin = () => {
    let buttons = document.querySelectorAll('.copy-code-button')

    for (let button of buttons) {
      button.addEventListener('click', () => {
        button.classList.add('copy-code-button-copied')
        navigator.clipboard.writeText(
          button.parentElement.querySelector('code').textContent ?? '',
        )
        setTimeout(() => {
          button.classList.remove('copy-code-button-copied')
        }, 2000)
      })
    }
  }

  document.addEventListener('astro:after-swap', initCopyCodePlugin)
  initCopyCodePlugin()
</script>
<footer transition:persist class="footer">
  <Typography
    itemtype="https://schema.org/WPFooter"
    itemprop="license"
    itemscope
    size="m"
  >
    CC BY-NC-SA 4.0
  </Typography>
  <div class="part">
    {
      icons.map(({ icon: Icon, name, link, id }) => (
        <a
          aria-label={`${t('follow-me-on')} ${name}`}
          data-umami-event="Visit footer social link"
          data-umami-event-name={id}
          rel="noreferrer noopener"
          target="_blank"
          class="link"
          href={link}
        >
          <Icon class="icon" />
          <Hidden>{name}</Hidden>
        </a>
      ))
    }
  </div>
</footer>

<style>
  .footer {
    display: flex;
    gap: var(--space-xs);
    place-content: space-between;
    place-items: center;
    padding: var(--space-m) var(--space-m) var(--space-xl);
    border-block-start: solid var(--color-border-primary);

    @media print {
      display: none;
    }
  }

  .part {
    display: flex;
    gap: var(--space-2xs);
    place-items: center;
  }

  .link {
    display: flex;
    padding: var(--space-xs);
    color: var(--color-content-primary);
    text-decoration: none;
    border-radius: var(--border-radius);
    transition: all 250ms;
    will-change: box-shadow, background, color;

    @media (hover: hover) {
      &:hover {
        color: var(--color-content-brand);
        background: var(--color-background-primary-hover);
      }
    }

    &:focus-visible {
      background: var(--color-overlay-brand);
      transition-property: box-shadow;
    }
  }

  .icon {
    display: flex;
    flex-shrink: 0;
    inline-size: var(--size-icon-m);
    block-size: var(--size-icon-m);
  }
</style>
