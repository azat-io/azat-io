---
import { ViewTransitions } from 'astro:transitions'

import { getLocaleFromUrl } from '~/utils/get-locale-from-url'
import { useTranslations } from '~/utils/use-translations'
import Analytics from '~/components/Analytics.astro'
import '~/styles/base.css'
import '~/styles/fonts.css'
import '~/styles/sizes.css'
import '~/styles/colors.css'
import '~/styles/spaces.css'

interface Props {
  type?: 'article' | 'website' | 'profile'
  keywords?: undefined | string[]
  image?: undefined | string
  date?: undefined | Date
  description: string
  title: string
}

let locale = getLocaleFromUrl(Astro.url)
let realLocale = getLocaleFromUrl(Astro.url, true)
let t = useTranslations(locale, 'head')

let {
  image = `/cover-${locale}.png`,
  type = 'website',
  description,
  keywords,
  title,
  date,
} = Astro.props

let canonicalURL = new URL(Astro.url.pathname, Astro.site)
  .toString()
  .replace(/\.html$/, '')

let pageTitle = `${title} | ${t('name')}`
let xUsername = locale === 'ru' ? '@azat_io' : '@azat_io_en'

let isProd = import.meta.env.PROD
---

<head>
  <meta charset="utf-8" />
  <meta content="width=device-width,initial-scale=1" name="viewport" />
  <meta name="theme-color" content="#1b1b1b" />

  <link href="/favicon.ico" sizes="any" rel="icon" />
  <link type="image/svg+xml" href="/icon.svg" rel="icon" />
  <link href="/apple-touch-icon.png" rel="apple-touch-icon" />
  <link href={`/manifest-${locale}.json`} rel="manifest" />

  <link
    href="/fonts/co-text-regular.woff2"
    fetchpriority="high"
    type="font/woff2"
    rel="preload"
    crossorigin
    as="font"
  />
  <link
    href="/fonts/co-text-bold.woff2"
    fetchpriority="high"
    type="font/woff2"
    rel="preload"
    crossorigin
    as="font"
  />

  <link href={canonicalURL} rel="canonical" />
  <link
    type="application/rss+xml"
    href={`${locale}/rss.xml`}
    title={t('name')}
    rel="alternate"
  />
  <link href="/sitemap-index.xml" rel="sitemap" />

  <title>{pageTitle}</title>
  <meta content={pageTitle} name="title" />
  <meta content={description} name="description" />
  {keywords && <meta content={keywords.join(', ')} name="keywords" />}

  <meta property="og:locale" content={realLocale} />
  <meta content={t('name')} name="author" />

  <meta property="og:type" content={type} />
  <meta
    content={Astro.url.toString().replace(/\.html/, '')}
    property="og:url"
  />
  <meta property="og:title" content={pageTitle} />
  <meta property="og:description" content={description} />
  <meta property="og:image" content={image} />
  <meta property="og:image:type" content="image/png" />
  <meta property="og:image:width" content="1200" />
  <meta property="og:image:height" content="630" />
  <meta content={`${t('cover-for')} ${pageTitle}`} property="og:image:alt" />

  {
    type === 'article' && (
      <>
        <meta property="article:author" content={t('name')} />
        <meta property="article:published_time" content={date?.toISOString()} />
        {keywords?.map(keyword => (
          <meta property="article:tag" content={keyword} />
        ))}
        <meta property="article:section" content="Technology" />
        <meta property="article:opinion" content="true" />
      </>
    )
  }

  {
    type === 'profile' && (
      <>
        <meta property="profile:first_name" content={t('first-name')} />
        <meta property="profile:last_name" content={t('last-name')} />
        <meta property="profile:username" content="azat_io" />
        <meta property="profile:gender" content="male" />
      </>
    )
  }

  <meta content="summary_large_image" property="twitter:card" />
  <meta property="twitter:url" content={Astro.url} />
  <meta name="twitter:creator" content={xUsername} />
  <meta name="twitter:site" content={xUsername} />
  <meta property="twitter:title" content={pageTitle} />
  <meta property="twitter:description" content={description} />
  <meta property="twitter:image" content={image} />
  <slot />

  <script is:inline>
    let initialize = () => {
      let theme = 'dark'
      if (localStorage.getItem('theme') === 'light') {
        theme = 'light'
      }
      document.documentElement.setAttribute('data-theme', theme)
      localStorage.setItem('theme', theme)
    }
    initialize()
    document.addEventListener('astro:after-swap', initialize)
  </script>

  {isProd && <Analytics />}
  <ViewTransitions />
</head>
