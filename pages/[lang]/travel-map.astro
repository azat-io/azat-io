---
import { getCollection } from 'astro:content'

import TravelWorldMap from '~/components/TravelMap/TravelMapWorldMap.astro'
import TravelMapCard from '~/components/TravelMap/TravelMapCard.astro'
import { getLocaleFromUrl } from '~/utils/get-locale-from-url'
import { useTranslations } from '~/utils/use-translations'
import LayoutDefault from '~/layouts/Default.astro'
import Title from '~/components/Title.astro'
import { locales } from '~/locales'

let locale = getLocaleFromUrl(Astro.url)
let t = useTranslations(locale, 'travel-map')

let collection = (await getCollection('travel-map')).map(({ data }) => data)
let total = collection.length

export let getStaticPaths = () =>
  locales.map(({ code }) => ({ params: { lang: code } }))
---

<LayoutDefault description={t('description')} title={t('title')} size="l">
  <Title>
    {t('title')}
  </Title>
  <TravelWorldMap countries={collection.map(({ code }) => code)} />
  <ul class="list">
    {
      collection.map(({ originName, originLang, code }) => (
        <TravelMapCard
          name={t(code as keyof typeof t)}
          originName={originName}
          originLang={originLang}
          code={code}
          tag="li"
        />
      ))
    }
  </ul>
</LayoutDefault>

<style define:vars={{ total }}>
  .list {
    display: grid;
    gap: calc(var(--space-m) * 1.75) var(--space-xs);
    inline-size: 100%;
    padding-inline-start: 0;
    margin-block-start: var(--space-xl);
    list-style: none;
  }

  @container (inline-size >= 680px) {
    .list {
      grid-template-rows: repeat(calc(var(--total) / var(--columns)), 1fr);
      grid-template-columns: repeat(var(--columns), 1fr);
      grid-auto-flow: column;
      --columns: 2;
    }
  }

  @container (inline-size >= 1080px) {
    .list {
      --columns: 3;
    }
  }
</style>
